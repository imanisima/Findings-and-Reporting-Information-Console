// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`iOS SearchBar component Props cancel button Disabled cancelButtonProps 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#ffffff",
      "flexDirection": "row",
      "overflow": "hidden",
      "paddingBottom": 13,
      "paddingTop": 13,
    }
  }
>
  <ForwardRef(Themed.Input)
    containerStyle={
      Object {
        "paddingHorizontal": 0,
      }
    }
    inputContainerStyle={
      Object {
        "backgroundColor": "#dcdce1",
        "borderBottomWidth": 0,
        "borderRadius": 9,
        "marginLeft": 8,
        "marginRight": 8,
        "minHeight": 36,
      }
    }
    inputStyle={
      Object {
        "marginLeft": 6,
        "overflow": "hidden",
      }
    }
    leftIcon={
      <Themed.Icon
        color="#7d7d7d"
        name="ios-search"
        size={20}
        type="ionicon"
      />
    }
    leftIconContainerStyle={
      Object {
        "marginLeft": 8,
      }
    }
    onBlur={[Function]}
    onCancel={[Function]}
    onChangeText={[Function]}
    onClear={[Function]}
    onFocus={[Function]}
    placeholderTextColor="#7d7d7d"
    renderErrorMessage={false}
    rightIcon={
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      />
    }
    rightIconContainerStyle={
      Object {
        "marginRight": 8,
      }
    }
    testID="searchInput"
    value=""
  />
  <View
    onLayout={[Function]}
    style={
      Object {
        "opacity": 0,
        "position": "absolute",
        "right": -0,
      }
    }
  >
    <ForwardRef
      accessibilityRole="button"
      disabled={true}
      onPress={[Function]}
    >
      <View
        style={
          Array [
            undefined,
            undefined,
          ]
        }
      >
        <Text
          disabled={true}
          style={
            Array [
              Object {
                "color": "#007aff",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              undefined,
              undefined,
              Object {
                "color": "#cdcdcd",
              },
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </ForwardRef>
  </View>
</View>
`;

exports[`iOS SearchBar component Props cancel button Disabled cancelButtonProps disabled styles 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#ffffff",
      "flexDirection": "row",
      "overflow": "hidden",
      "paddingBottom": 13,
      "paddingTop": 13,
    }
  }
>
  <ForwardRef(Themed.Input)
    containerStyle={
      Object {
        "paddingHorizontal": 0,
      }
    }
    inputContainerStyle={
      Object {
        "backgroundColor": "#dcdce1",
        "borderBottomWidth": 0,
        "borderRadius": 9,
        "marginLeft": 8,
        "marginRight": 8,
        "minHeight": 36,
      }
    }
    inputStyle={
      Object {
        "marginLeft": 6,
        "overflow": "hidden",
      }
    }
    leftIcon={
      <Themed.Icon
        color="#7d7d7d"
        name="ios-search"
        size={20}
        type="ionicon"
      />
    }
    leftIconContainerStyle={
      Object {
        "marginLeft": 8,
      }
    }
    onBlur={[Function]}
    onCancel={[Function]}
    onChangeText={[Function]}
    onClear={[Function]}
    onFocus={[Function]}
    placeholderTextColor="#7d7d7d"
    renderErrorMessage={false}
    rightIcon={
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      />
    }
    rightIconContainerStyle={
      Object {
        "marginRight": 8,
      }
    }
    testID="searchInput"
    value=""
  />
  <View
    onLayout={[Function]}
    style={
      Object {
        "opacity": 0,
        "position": "absolute",
        "right": -0,
      }
    }
  >
    <ForwardRef
      accessibilityRole="button"
      disabled={true}
      onPress={[Function]}
    >
      <View
        style={
          Array [
            undefined,
            Object {
              "backgroundColor": "#cdcdcd",
            },
          ]
        }
      >
        <Text
          disabled={true}
          style={
            Array [
              Object {
                "color": "#007aff",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              undefined,
              undefined,
              Object {
                "color": "#ffffff",
              },
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </ForwardRef>
  </View>
</View>
`;

exports[`iOS SearchBar component Props cancel button Enabled cancelButtonProps 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#ffffff",
      "flexDirection": "row",
      "overflow": "hidden",
      "paddingBottom": 13,
      "paddingTop": 13,
    }
  }
>
  <ForwardRef(Themed.Input)
    containerStyle={
      Object {
        "paddingHorizontal": 0,
      }
    }
    inputContainerStyle={
      Object {
        "backgroundColor": "#dcdce1",
        "borderBottomWidth": 0,
        "borderRadius": 9,
        "marginLeft": 8,
        "marginRight": 8,
        "minHeight": 36,
      }
    }
    inputStyle={
      Object {
        "marginLeft": 6,
        "overflow": "hidden",
      }
    }
    leftIcon={
      <Themed.Icon
        color="#7d7d7d"
        name="ios-search"
        size={20}
        type="ionicon"
      />
    }
    leftIconContainerStyle={
      Object {
        "marginLeft": 8,
      }
    }
    onBlur={[Function]}
    onCancel={[Function]}
    onChangeText={[Function]}
    onClear={[Function]}
    onFocus={[Function]}
    placeholderTextColor="#7d7d7d"
    renderErrorMessage={false}
    rightIcon={
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      />
    }
    rightIconContainerStyle={
      Object {
        "marginRight": 8,
      }
    }
    testID="searchInput"
    value=""
  />
  <View
    onLayout={[Function]}
    style={
      Object {
        "opacity": 0,
        "position": "absolute",
        "right": -0,
      }
    }
  >
    <ForwardRef
      accessibilityRole="button"
      onPress={[Function]}
    >
      <View
        style={
          Array [
            Object {
              "elevation": 0,
            },
            undefined,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007aff",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              Object {
                "color": "black",
              },
              Object {
                "fontSize": 12,
              },
              undefined,
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </ForwardRef>
  </View>
</View>
`;

exports[`iOS SearchBar component Props cancel button Enabled cancelButtonTitle 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#ffffff",
      "flexDirection": "row",
      "overflow": "hidden",
      "paddingBottom": 13,
      "paddingTop": 13,
    }
  }
>
  <ForwardRef(Themed.Input)
    containerStyle={
      Object {
        "paddingHorizontal": 0,
      }
    }
    inputContainerStyle={
      Object {
        "backgroundColor": "#dcdce1",
        "borderBottomWidth": 0,
        "borderRadius": 9,
        "marginLeft": 8,
        "marginRight": 8,
        "minHeight": 36,
      }
    }
    inputStyle={
      Object {
        "marginLeft": 6,
        "overflow": "hidden",
      }
    }
    leftIcon={
      <Themed.Icon
        color="#7d7d7d"
        name="ios-search"
        size={20}
        type="ionicon"
      />
    }
    leftIconContainerStyle={
      Object {
        "marginLeft": 8,
      }
    }
    onBlur={[Function]}
    onCancel={[Function]}
    onChangeText={[Function]}
    onClear={[Function]}
    onFocus={[Function]}
    placeholderTextColor="#7d7d7d"
    renderErrorMessage={false}
    rightIcon={
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      />
    }
    rightIconContainerStyle={
      Object {
        "marginRight": 8,
      }
    }
    testID="searchInput"
    value=""
  />
  <View
    onLayout={[Function]}
    style={
      Object {
        "opacity": 0,
        "position": "absolute",
        "right": -0,
      }
    }
  >
    <ForwardRef
      accessibilityRole="button"
      onPress={[Function]}
    >
      <View
        style={
          Array [
            undefined,
            undefined,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007aff",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          Annuler
        </Text>
      </View>
    </ForwardRef>
  </View>
</View>
`;

exports[`iOS SearchBar component Props clearIcon and without clearIcon 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#ffffff",
      "flexDirection": "row",
      "overflow": "hidden",
      "paddingBottom": 13,
      "paddingTop": 13,
    }
  }
>
  <ForwardRef(Themed.Input)
    containerStyle={
      Object {
        "paddingHorizontal": 0,
      }
    }
    inputContainerStyle={
      Object {
        "backgroundColor": "#dcdce1",
        "borderBottomWidth": 0,
        "borderRadius": 9,
        "marginLeft": 8,
        "marginRight": 8,
        "minHeight": 36,
      }
    }
    inputStyle={
      Object {
        "marginLeft": 6,
        "overflow": "hidden",
      }
    }
    leftIcon={
      <Themed.Icon
        color="#7d7d7d"
        name="ios-search"
        size={20}
        type="ionicon"
      />
    }
    leftIconContainerStyle={
      Object {
        "marginLeft": 8,
      }
    }
    onBlur={[Function]}
    onCancel={[Function]}
    onChangeText={[Function]}
    onClear={[Function]}
    onFocus={[Function]}
    placeholderTextColor="#7d7d7d"
    renderErrorMessage={false}
    rightIcon={
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      />
    }
    rightIconContainerStyle={
      Object {
        "marginRight": 8,
      }
    }
    testID="searchInput"
    value=""
  />
  <View
    onLayout={[Function]}
    style={
      Object {
        "opacity": 0,
        "position": "absolute",
        "right": -0,
      }
    }
  >
    <ForwardRef
      accessibilityRole="button"
      onPress={[Function]}
    >
      <View
        style={
          Array [
            undefined,
            undefined,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007aff",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </ForwardRef>
  </View>
</View>
`;

exports[`iOS SearchBar component Props clearIcon and without custom clearIcon 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#ffffff",
      "flexDirection": "row",
      "overflow": "hidden",
      "paddingBottom": 13,
      "paddingTop": 13,
    }
  }
>
  <ForwardRef(Themed.Input)
    containerStyle={
      Object {
        "paddingHorizontal": 0,
      }
    }
    inputContainerStyle={
      Object {
        "backgroundColor": "#dcdce1",
        "borderBottomWidth": 0,
        "borderRadius": 9,
        "marginLeft": 8,
        "marginRight": 8,
        "minHeight": 36,
      }
    }
    inputStyle={
      Object {
        "marginLeft": 6,
        "overflow": "hidden",
      }
    }
    leftIcon={
      <Themed.Icon
        color="#7d7d7d"
        name="ios-search"
        size={20}
        type="ionicon"
      />
    }
    leftIconContainerStyle={
      Object {
        "marginLeft": 8,
      }
    }
    onBlur={[Function]}
    onCancel={[Function]}
    onChangeText={[Function]}
    onClear={[Function]}
    onFocus={[Function]}
    placeholderTextColor="#7d7d7d"
    renderErrorMessage={false}
    rightIcon={
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      />
    }
    rightIconContainerStyle={
      Object {
        "marginRight": 8,
      }
    }
    testID="searchInput"
    value=""
  />
  <View
    onLayout={[Function]}
    style={
      Object {
        "opacity": 0,
        "position": "absolute",
        "right": -0,
      }
    }
  >
    <ForwardRef
      accessibilityRole="button"
      onPress={[Function]}
    >
      <View
        style={
          Array [
            undefined,
            undefined,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007aff",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </ForwardRef>
  </View>
</View>
`;

exports[`iOS SearchBar component Props clearIcon and without no clearIcon 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#ffffff",
      "flexDirection": "row",
      "overflow": "hidden",
      "paddingBottom": 13,
      "paddingTop": 13,
    }
  }
>
  <ForwardRef(Themed.Input)
    containerStyle={
      Object {
        "paddingHorizontal": 0,
      }
    }
    inputContainerStyle={
      Object {
        "backgroundColor": "#dcdce1",
        "borderBottomWidth": 0,
        "borderRadius": 9,
        "marginLeft": 8,
        "marginRight": 8,
        "minHeight": 36,
      }
    }
    inputStyle={
      Object {
        "marginLeft": 6,
        "overflow": "hidden",
      }
    }
    leftIcon={
      <Themed.Icon
        color="#7d7d7d"
        name="ios-search"
        size={20}
        type="ionicon"
      />
    }
    leftIconContainerStyle={
      Object {
        "marginLeft": 8,
      }
    }
    onBlur={[Function]}
    onCancel={[Function]}
    onChangeText={[Function]}
    onClear={[Function]}
    onFocus={[Function]}
    placeholderTextColor="#7d7d7d"
    renderErrorMessage={false}
    rightIcon={
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      />
    }
    rightIconContainerStyle={
      Object {
        "marginRight": 8,
      }
    }
    testID="searchInput"
    value=""
  />
  <View
    onLayout={[Function]}
    style={
      Object {
        "opacity": 0,
        "position": "absolute",
        "right": -0,
      }
    }
  >
    <ForwardRef
      accessibilityRole="button"
      onPress={[Function]}
    >
      <View
        style={
          Array [
            undefined,
            undefined,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007aff",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </ForwardRef>
  </View>
</View>
`;

exports[`iOS SearchBar component Props searchIcon and without custom searchIcon 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#ffffff",
      "flexDirection": "row",
      "overflow": "hidden",
      "paddingBottom": 13,
      "paddingTop": 13,
    }
  }
>
  <ForwardRef(Themed.Input)
    containerStyle={
      Object {
        "paddingHorizontal": 0,
      }
    }
    inputContainerStyle={
      Object {
        "backgroundColor": "#dcdce1",
        "borderBottomWidth": 0,
        "borderRadius": 9,
        "marginLeft": 8,
        "marginRight": 8,
        "minHeight": 36,
      }
    }
    inputStyle={
      Object {
        "marginLeft": 6,
        "overflow": "hidden",
      }
    }
    leftIcon={<View />}
    leftIconContainerStyle={
      Object {
        "marginLeft": 8,
      }
    }
    onBlur={[Function]}
    onCancel={[Function]}
    onChangeText={[Function]}
    onClear={[Function]}
    onFocus={[Function]}
    placeholderTextColor="#7d7d7d"
    renderErrorMessage={false}
    rightIcon={
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      />
    }
    rightIconContainerStyle={
      Object {
        "marginRight": 8,
      }
    }
    round={true}
    testID="searchInput"
    value=""
  />
  <View
    onLayout={[Function]}
    style={
      Object {
        "opacity": 0,
        "position": "absolute",
        "right": -0,
      }
    }
  >
    <ForwardRef
      accessibilityRole="button"
      onPress={[Function]}
    >
      <View
        style={
          Array [
            undefined,
            undefined,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007aff",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </ForwardRef>
  </View>
</View>
`;

exports[`iOS SearchBar component Props searchIcon and without no searchIcon 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#ffffff",
      "flexDirection": "row",
      "overflow": "hidden",
      "paddingBottom": 13,
      "paddingTop": 13,
    }
  }
>
  <ForwardRef(Themed.Input)
    containerStyle={
      Object {
        "paddingHorizontal": 0,
      }
    }
    inputContainerStyle={
      Object {
        "backgroundColor": "#dcdce1",
        "borderBottomWidth": 0,
        "borderRadius": 9,
        "marginLeft": 8,
        "marginRight": 8,
        "minHeight": 36,
      }
    }
    inputStyle={
      Object {
        "marginLeft": 6,
        "overflow": "hidden",
      }
    }
    leftIcon={null}
    leftIconContainerStyle={
      Object {
        "marginLeft": 8,
      }
    }
    onBlur={[Function]}
    onCancel={[Function]}
    onChangeText={[Function]}
    onClear={[Function]}
    onFocus={[Function]}
    placeholderTextColor="#7d7d7d"
    renderErrorMessage={false}
    rightIcon={
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      />
    }
    rightIconContainerStyle={
      Object {
        "marginRight": 8,
      }
    }
    testID="searchInput"
    value=""
  />
  <View
    onLayout={[Function]}
    style={
      Object {
        "opacity": 0,
        "position": "absolute",
        "right": -0,
      }
    }
  >
    <ForwardRef
      accessibilityRole="button"
      onPress={[Function]}
    >
      <View
        style={
          Array [
            undefined,
            undefined,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007aff",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </ForwardRef>
  </View>
</View>
`;

exports[`iOS SearchBar component Props searchIcon and without searchIcon 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#ffffff",
      "flexDirection": "row",
      "overflow": "hidden",
      "paddingBottom": 13,
      "paddingTop": 13,
    }
  }
>
  <ForwardRef(Themed.Input)
    containerStyle={
      Object {
        "paddingHorizontal": 0,
      }
    }
    inputContainerStyle={
      Object {
        "backgroundColor": "#dcdce1",
        "borderBottomWidth": 0,
        "borderRadius": 9,
        "marginLeft": 8,
        "marginRight": 8,
        "minHeight": 36,
      }
    }
    inputStyle={
      Object {
        "marginLeft": 6,
        "overflow": "hidden",
      }
    }
    leftIcon={
      <Themed.Icon
        color="#7d7d7d"
        name="ios-search"
        size={50}
        type="ionicon"
      />
    }
    leftIconContainerStyle={
      Object {
        "marginLeft": 8,
      }
    }
    lightTheme={true}
    onBlur={[Function]}
    onCancel={[Function]}
    onChangeText={[Function]}
    onClear={[Function]}
    onFocus={[Function]}
    placeholderTextColor="#7d7d7d"
    renderErrorMessage={false}
    rightIcon={
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      />
    }
    rightIconContainerStyle={
      Object {
        "marginRight": 8,
      }
    }
    testID="searchInput"
    value=""
  />
  <View
    onLayout={[Function]}
    style={
      Object {
        "opacity": 0,
        "position": "absolute",
        "right": -0,
      }
    }
  >
    <ForwardRef
      accessibilityRole="button"
      onPress={[Function]}
    >
      <View
        style={
          Array [
            undefined,
            undefined,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007aff",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </ForwardRef>
  </View>
</View>
`;

exports[`iOS SearchBar component Props showLoading, loadingProps 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#ffffff",
      "flexDirection": "row",
      "height": 70,
      "overflow": "hidden",
      "paddingBottom": 13,
      "paddingTop": 13,
    }
  }
>
  <ForwardRef(Themed.Input)
    containerStyle={
      Object {
        "paddingHorizontal": 0,
      }
    }
    inputContainerStyle={
      Object {
        "backgroundColor": "#dcdce1",
        "borderBottomWidth": 0,
        "borderRadius": 9,
        "marginLeft": 8,
        "marginRight": 8,
        "minHeight": 36,
      }
    }
    inputStyle={
      Object {
        "marginLeft": 6,
        "overflow": "hidden",
      }
    }
    leftIcon={
      <Themed.Icon
        color="#7d7d7d"
        name="ios-search"
        size={20}
        type="ionicon"
      />
    }
    leftIconContainerStyle={
      Object {
        "marginLeft": 8,
      }
    }
    onBlur={[Function]}
    onCancel={[Function]}
    onChangeText={[Function]}
    onClear={[Function]}
    onFocus={[Function]}
    placeholderTextColor="#7d7d7d"
    renderErrorMessage={false}
    rightIcon={
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      >
        <ActivityIndicator
          animating={true}
          color="#999999"
          hidesWhenStopped={true}
          size="small"
          style={
            Object {
              "flex": 1,
              "marginRight": 5,
            }
          }
        />
      </View>
    }
    rightIconContainerStyle={
      Object {
        "marginRight": 8,
      }
    }
    testID="searchInput"
    value=""
  />
  <View
    onLayout={[Function]}
    style={
      Object {
        "opacity": 0,
        "position": "absolute",
        "right": -0,
      }
    }
  >
    <ForwardRef
      accessibilityRole="button"
      onPress={[Function]}
    >
      <View
        style={
          Array [
            undefined,
            undefined,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007aff",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </ForwardRef>
  </View>
</View>
`;

exports[`iOS SearchBar component should render with a preset value 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#ffffff",
      "flexDirection": "row",
      "overflow": "hidden",
      "paddingBottom": 13,
      "paddingTop": 13,
    }
  }
>
  <ForwardRef(Themed.Input)
    containerStyle={
      Object {
        "paddingHorizontal": 0,
      }
    }
    inputContainerStyle={
      Object {
        "backgroundColor": "#dcdce1",
        "borderBottomWidth": 0,
        "borderRadius": 9,
        "marginLeft": 8,
        "marginRight": 8,
        "minHeight": 36,
      }
    }
    inputStyle={
      Object {
        "marginLeft": 6,
        "overflow": "hidden",
      }
    }
    leftIcon={
      <Themed.Icon
        color="#7d7d7d"
        name="ios-search"
        size={20}
        type="ionicon"
      />
    }
    leftIconContainerStyle={
      Object {
        "marginLeft": 8,
      }
    }
    onBlur={[Function]}
    onCancel={[Function]}
    onChangeText={[Function]}
    onClear={[Function]}
    onFocus={[Function]}
    placeholderTextColor="#7d7d7d"
    renderErrorMessage={false}
    rightIcon={
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      >
        <Themed.Icon
          color="#7d7d7d"
          name="ios-close-circle"
          onPress={[Function]}
          size={20}
          type="ionicon"
        />
      </View>
    }
    rightIconContainerStyle={
      Object {
        "marginRight": 8,
      }
    }
    testID="searchInput"
    value="Chickens"
  />
  <View
    onLayout={[Function]}
    style={
      Object {
        "opacity": 0,
        "position": "absolute",
        "right": -0,
      }
    }
  >
    <ForwardRef
      accessibilityRole="button"
      onPress={[Function]}
    >
      <View
        style={
          Array [
            undefined,
            undefined,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007aff",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </ForwardRef>
  </View>
</View>
`;

exports[`iOS SearchBar component should render without issues 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#ffffff",
      "flexDirection": "row",
      "overflow": "hidden",
      "paddingBottom": 13,
      "paddingTop": 13,
    }
  }
>
  <ForwardRef(Themed.Input)
    containerStyle={
      Object {
        "paddingHorizontal": 0,
      }
    }
    inputContainerStyle={
      Object {
        "backgroundColor": "#dcdce1",
        "borderBottomWidth": 0,
        "borderRadius": 9,
        "marginLeft": 8,
        "marginRight": 8,
        "minHeight": 36,
      }
    }
    inputStyle={
      Object {
        "marginLeft": 6,
        "overflow": "hidden",
      }
    }
    leftIcon={
      <Themed.Icon
        color="#7d7d7d"
        name="ios-search"
        size={20}
        type="ionicon"
      />
    }
    leftIconContainerStyle={
      Object {
        "marginLeft": 8,
      }
    }
    onBlur={[Function]}
    onCancel={[Function]}
    onChangeText={[Function]}
    onClear={[Function]}
    onFocus={[Function]}
    placeholderTextColor="#7d7d7d"
    renderErrorMessage={false}
    rightIcon={
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      />
    }
    rightIconContainerStyle={
      Object {
        "marginRight": 8,
      }
    }
    testID="searchInput"
    value=""
  />
  <View
    onLayout={[Function]}
    style={
      Object {
        "opacity": 0,
        "position": "absolute",
        "right": -0,
      }
    }
  >
    <ForwardRef
      accessibilityRole="button"
      onPress={[Function]}
    >
      <View
        style={
          Array [
            undefined,
            undefined,
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007aff",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </ForwardRef>
  </View>
</View>
`;
